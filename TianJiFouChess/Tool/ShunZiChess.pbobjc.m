// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shunZiChess.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ShunZiChess.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ShunZiChessRoot

@implementation ShunZiChessRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ShunZiChessRoot_FileDescriptor

static GPBFileDescriptor *ShunZiChessRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum tianJiFouMessageId

GPBEnumDescriptor *tianJiFouMessageId_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "KChallenge\000KPutInstantMessage\000KGetInstan"
        "tMessage\000";
    static const int32_t values[] = {
        tianJiFouMessageId_KChallenge,
        tianJiFouMessageId_KPutInstantMessage,
        tianJiFouMessageId_KGetInstantMessage,
    };
    static const char *extraTextFormatInfo = "\003\000*\000\0012\000\0022\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(tianJiFouMessageId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:tianJiFouMessageId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL tianJiFouMessageId_IsValidValue(int32_t value__) {
  switch (value__) {
    case tianJiFouMessageId_KChallenge:
    case tianJiFouMessageId_KPutInstantMessage:
    case tianJiFouMessageId_KGetInstantMessage:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - InstantMessage

@implementation InstantMessage

@dynamic id_p;
@dynamic from;
@dynamic realname;
@dynamic avatar;
@dynamic type;
@dynamic content;
@dynamic createTime;
@dynamic to;
@dynamic isGroupChat;

typedef struct InstantMessage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  uint32_t type;
  uint32_t createTime;
  NSString *from;
  NSString *realname;
  NSString *avatar;
  NSString *content;
  NSString *to;
} InstantMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InstantMessage__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InstantMessage__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "realname",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_Realname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InstantMessage__storage_, realname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InstantMessage__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InstantMessage__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InstantMessage__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createTime",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_CreateTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InstantMessage__storage_, createTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_To,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(InstantMessage__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isGroupChat",
        .dataTypeSpecific.className = NULL,
        .number = InstantMessage_FieldNumber_IsGroupChat,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstantMessage class]
                                     rootClass:[ShunZiChessRoot class]
                                          file:ShunZiChessRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstantMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PutInstantMessage

@implementation PutInstantMessage

@dynamic from;
@dynamic to;
@dynamic hasMessage, message;
@dynamic isGroupChat;

typedef struct PutInstantMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *from;
  NSString *to;
  InstantMessage *message;
} PutInstantMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = PutInstantMessage_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PutInstantMessage__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = PutInstantMessage_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PutInstantMessage__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(InstantMessage),
        .number = PutInstantMessage_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PutInstantMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isGroupChat",
        .dataTypeSpecific.className = NULL,
        .number = PutInstantMessage_FieldNumber_IsGroupChat,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PutInstantMessage class]
                                     rootClass:[ShunZiChessRoot class]
                                          file:ShunZiChessRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PutInstantMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetInstantMessage

@implementation GetInstantMessage

@dynamic from;
@dynamic to;
@dynamic hasMessage, message;
@dynamic isGroupChat;

typedef struct GetInstantMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *from;
  NSString *to;
  InstantMessage *message;
} GetInstantMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GetInstantMessage_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetInstantMessage__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = GetInstantMessage_FieldNumber_To,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetInstantMessage__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(InstantMessage),
        .number = GetInstantMessage_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetInstantMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isGroupChat",
        .dataTypeSpecific.className = NULL,
        .number = GetInstantMessage_FieldNumber_IsGroupChat,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetInstantMessage class]
                                     rootClass:[ShunZiChessRoot class]
                                          file:ShunZiChessRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetInstantMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PointMessage

@implementation PointMessage

@dynamic xx;
@dynamic yy;

typedef struct PointMessage__storage_ {
  uint32_t _has_storage_[1];
  float xx;
  float yy;
} PointMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "xx",
        .dataTypeSpecific.className = NULL,
        .number = PointMessage_FieldNumber_Xx,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PointMessage__storage_, xx),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "yy",
        .dataTypeSpecific.className = NULL,
        .number = PointMessage_FieldNumber_Yy,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PointMessage__storage_, yy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PointMessage class]
                                     rootClass:[ShunZiChessRoot class]
                                          file:ShunZiChessRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PointMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChallengeMessage

@implementation ChallengeMessage

@dynamic typeRole;
@dynamic from;
@dynamic to;
@dynamic hasPoint, point;
@dynamic chessType;

typedef struct ChallengeMessage__storage_ {
  uint32_t _has_storage_[1];
  uint32_t typeRole;
  uint32_t chessType;
  NSString *from;
  NSString *to;
  PointMessage *point;
} ChallengeMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeRole",
        .dataTypeSpecific.className = NULL,
        .number = ChallengeMessage_FieldNumber_TypeRole,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChallengeMessage__storage_, typeRole),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = ChallengeMessage_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChallengeMessage__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = ChallengeMessage_FieldNumber_To,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChallengeMessage__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "point",
        .dataTypeSpecific.className = GPBStringifySymbol(PointMessage),
        .number = ChallengeMessage_FieldNumber_Point,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChallengeMessage__storage_, point),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chessType",
        .dataTypeSpecific.className = NULL,
        .number = ChallengeMessage_FieldNumber_ChessType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChallengeMessage__storage_, chessType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChallengeMessage class]
                                     rootClass:[ShunZiChessRoot class]
                                          file:ShunZiChessRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChallengeMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
